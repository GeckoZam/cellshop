---
  - name: Instalar .NET Core 8 y configurar la aplicación de hotel
    hosts: 54.175.82.56
    connection: local
    become: yes
    tasks:
    - name: Actualizar el sistema
      apt:
        update_cache: yes
        upgrade: dist

    - name: Instalar dependencias necesarias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Descargar el paquete de repositorio de Microsoft para Ubuntu 24.04 LTS
      command: wget https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb -O /tmp/packages-microsoft-prod.deb

    - name: Instalar el paquete de repositorio de Microsoft
      command: dpkg -i /tmp/packages-microsoft-prod.deb

    - name: Actualizar el caché de apt después de agregar el repositorio
      apt:
        update_cache: yes

    - name: Instalar .NET SDK
      apt:
        name: dotnet-sdk-8.0
        state: present
    - name: Crear archivo del proyecto
      copy:
        dest: /home/ubuntu/mobile_store_app/mobile_store_app.csproj
        content: |
          <Project Sdk="Microsoft.NET.Sdk.Web">

          <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
          </PropertyGroup>

          </Project>
     - name: Crear archivo de código fuente
      copy:
        dest: /home/ubuntu/mobile_store_app/Program.cs
        content: |
          using System;
          using System.Collections.Generic;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.Hosting;
          using Microsoft.AspNetCore.Builder;
          using Microsoft.Extensions.DependencyInjection;
          
          namespace MobileStoreApp
          {
              public class Program
              {
                  public static void Main(string[] args)
                  {
                      CreateHostBuilder(args).Build().Run();
                  }
          
                  public static IHostBuilder CreateHostBuilder(string[] args) =>
                      Host.CreateDefaultBuilder(args)
                          .ConfigureWebHostDefaults(webBuilder =>
                          {
                              webBuilder.UseStartup<Startup>();
                          });
              }
          
              public class Startup
              {
                  public void ConfigureServices(IServiceCollection services)
                  {
                      services.AddControllers();
                  }
          
                  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
                  {
                      if (env.IsDevelopment())
                      {
                          app.UseDeveloperExceptionPage();
                      }
                      else
                      {
                          app.UseExceptionHandler("/Home/Error");
                          app.UseHsts();
                      }
                      app.UseHttpsRedirection();
                      app.UseRouting();
                      app.UseAuthorization();
                      app.UseEndpoints(endpoints =>
                      {
                          endpoints.MapControllers();
                      });
                  }
              }
          
              // Singleton: StoreManager solo tendrá una única instancia en toda la aplicación
              public class StoreManager
              {
                  private static StoreManager instance = null;
                  private static readonly object padlock = new object();
                  public List<Mobile> mobiles = new List<Mobile>();
                  private List<IObserver> observers = new List<IObserver>();
          
                  private StoreManager() { }
          
                  public static StoreManager Instance
                  {
                      get
                      {
                          lock (padlock)
                          {
                              if (instance == null)
                              {
                                  instance = new StoreManager();
                              }
                              return instance;
                          }
                      }
                  }
          
                  // Observer: Agregar observadores como inventario y facturación
                  public void AddObserver(IObserver observer)
                  {
                      observers.Add(observer);
                  }
          
                  public void NotifyObservers(Mobile mobile, int quantity)
                  {
                      foreach (var observer in observers)
                      {
                          observer.Update(mobile, quantity);
                      }
                  }
          
                  // Factory Method: Usar una fábrica para crear los móviles
                  public void AddMobile(string model, string brand, double price, List<string> features)
                  {
                      MobileFactory factory = new ConcreteMobileFactory();
                      var mobile = factory.CreateMobile(model, brand, price, features);
                      mobiles.Add(mobile);
                      mobile.PrintDetails();
                  }
          
                  public void PrintAllMobiles()
                  {
                      foreach (var mobile in mobiles)
                      {
                          mobile.PrintDetails();
                      }
                  }
          
                  // ProcessSale con Observer para notificar a los subsistemas
                  public void ProcessSale(string model, int quantity)
                  {
                      Mobile mobile = mobiles.Find(m => m.Model == model);
                      if (mobile != null)
                      {
                          Console.WriteLine($"Processing sale for {quantity} units of {mobile.Model}");
                          NotifyObservers(mobile, quantity);  // Notificamos a los observadores
                      }
                      else
                      {
                          Console.WriteLine("Mobile not found");
                      }
                  }
              }
          
              // Factory Method: Definir una interfaz para crear móviles
              public abstract class MobileFactory
              {
                  public abstract Mobile CreateMobile(string model, string brand, double price, List<string> features);
              }
          
              public class ConcreteMobileFactory : MobileFactory
              {
                  public override Mobile CreateMobile(string model, string brand, double price, List<string> features)
                  {
                      return new Mobile { Model = model, Brand = brand, Price = price, Features = features };
                  }
              }
          
              public class Mobile
              {
                  public string Model;
                  public string Brand;
                  public double Price;
                  public List<string> Features = new List<string>();
          
                  public virtual void PrintDetails()
                  {
                      Console.WriteLine($"Model: {Model}, Brand: {Brand}, Price: {Price:C}");
                      Console.WriteLine("Features:");
                      foreach (var feature in Features)
                      {
                          Console.WriteLine($"- {feature}");
                      }
                  }
              }
          
              // Observer: Interface para observadores
              public interface IObserver
              {
                  void Update(Mobile mobile, int quantity);
              }
          
              public class Inventory : IObserver
              {
                  public void Update(Mobile mobile, int quantity)
                  {
                      Console.WriteLine($"Inventory updated for {mobile.Model} - Sold: {quantity}");
                  }
              }
          
              public class Billing : IObserver
              {
                  public void Update(Mobile mobile, int quantity)
                  {
                      double total = mobile.Price * quantity;
                      Console.WriteLine($"Billing: {mobile.Model} x{quantity} = {total:C}");
                  }
              }
          
              // Facade: Simplificar las interacciones con el inventario y la facturación
              public class StoreFacade
              {
                  private Inventory inventory = new Inventory();
                  private Billing billing = new Billing();
          
                  public void ProcessSale(Mobile mobile, int quantity)
                  {
                      inventory.Update(mobile, quantity);
                      billing.Update(mobile, quantity);
                      Console.WriteLine("Sale processed via facade.");
                  }
              }
          
              // Decorator: Agregar funcionalidades adicionales a un móvil de forma dinámica
              public abstract class MobileDecorator : Mobile
              {
                  protected Mobile mobile;
          
                  public MobileDecorator(Mobile mobile)
                  {
                      this.mobile = mobile;
                  }
          
                  public override void PrintDetails()
                  {
                      mobile.PrintDetails();
                  }
              }
          
              public class InsuranceDecorator : MobileDecorator
              {
                  public InsuranceDecorator(Mobile mobile) : base(mobile) { }
          
                  public override void PrintDetails()
                  {
                      base.PrintDetails();
                      Console.WriteLine("Includes insurance.");
                  }
              }
          
              // Strategy: Definir varias estrategias de descuento
              public interface IDiscountStrategy
              {
                  void ApplyDiscount(Mobile mobile);
              }
          
              public class BrandXDiscountStrategy : IDiscountStrategy
              {
                  public void ApplyDiscount(Mobile mobile)
                  {
                      mobile.Price *= 0.9;
                      Console.WriteLine($"Discount applied to {mobile.Model}. New price: {mobile.Price:C}");
                  }
              }
          
              public class BrandYDiscountStrategy : IDiscountStrategy
              {
                  public void ApplyDiscount(Mobile mobile)
                  {
                      mobile.Price *= 0.85;
                      Console.WriteLine($"Discount applied to {mobile.Model}. New price: {mobile.Price:C}");
                  }
              }
          
              public class NoDiscountStrategy : IDiscountStrategy
              {
                  public void ApplyDiscount(Mobile mobile)
                  {
                      Console.WriteLine("No discount available for this brand.");
                  }
              }
          
              // Chain of Responsibility: Manejo de descuentos mediante una cadena
              public abstract class DiscountHandler
              {
                  protected DiscountHandler next;
          
                  public void SetNext(DiscountHandler nextHandler)
                  {
                      next = nextHandler;
                  }
          
                  public abstract void Handle(Mobile mobile);
              }
          
              public class BrandXDiscountHandler : DiscountHandler
              {
                  public override void Handle(Mobile mobile)
                  {
                      if (mobile.Brand == "BrandX")
                      {
                          mobile.Price *= 0.9;
                          Console.WriteLine($"BrandX discount applied to {mobile.Model}. New price: {mobile.Price:C}");
                      }
                      else if (next != null)
                      {
                          next.Handle(mobile);
                      }
                  }
              }
          
              public class BrandYDiscountHandler : DiscountHandler
              {
                  public override void Handle(Mobile mobile)
                  {
                      if (mobile.Brand == "BrandY")
                      {
                          mobile.Price *= 0.85;
                          Console.WriteLine($"BrandY discount applied to {mobile.Model}. New price: {mobile.Price:C}");
                      }
                      else if (next != null)
                      {
                          next.Handle(mobile);
                      }
                  }
              }
          }

    - name: Construir la aplicación de tienda de celulares
      command: dotnet build /home/ubuntu/mobile_store_app/mobile_store_app.csproj
      args:
        chdir: /home/ubuntu/mobile_store_app
    - name: Ejecutar la aplicación de celulares
      command: dotnet run --urls "http://*:5000"
      args:
        chdir: /home/ubuntu/mobile_store_app
